<?php

/**
 * @file
 * MailChimp eCommerce core functionality.
 */

/**
 * Implements hook_menu().
 */
function mailchimp_ecommerce_menu() {
  $items = array();

  $items['admin/config/services/mailchimp/ecommerce'] = array(
    'title' => t('eCommerce'),
    'description' => t('Configure MailChimp eCommerce.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchimp_ecommerce_admin_settings'),
    'access callback' => 'mailchimp_apikey_ready_access',
    'access arguments' => array('administer mailchimp'),
    'file' => 'includes/mailchimp_ecommerce.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  return $items;
}

/**
 * Return information about the store from the supplied id.
 *
 * @param string $store_id
 * @return object
 */
function mailchimp_ecommerce_get_store($store_id) {
  try {
    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    return $mc_ecommerce->getStore($store_id);
  }
  catch (Exception $e) {
    watchdog('mailchimp_ecommerce', 'Unable to get store: %message', array(
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Add a new store to Mailchimp.
 *
 * @param string $store_id
 * @param string $list_id
 * @param string $name
 * @param string $currency_code
 *  The three-letter ISO 4217 code.
 */
function mailchimp_ecommerce_add_store($store_id, $list_id, $name, $currency_code) {
  try {
    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->addStore($store_id, $list_id, $name, $currency_code);
  }
  catch (Exception $e) {
    watchdog('mailchimp_ecommerce', 'Unable to add a new store: %message', array(
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Update a store name or currency code.
 *
 * @param string $store_id
 * @param string $name
 * @param string $currency_code
 *  The three-letter ISO 4217 code.
 */
function mailchimp_ecommerce_update_store($store_id, $name, $currency_code) {
  try {
    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->updateStore($store_id, $name, $currency_code);
  }
  catch (Exception $e) {
    watchdog('mailchimp_ecommerce', 'Unable to update a store: %message', array(
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Add a new customer to Mailchimp.
 *
 * @param string $customer_id
 *  The unique ID you assign to the user.
 * @param string $email_address
 *  Email address of the user.
 * @param array $parameters
 *  Optional parameters.
 * @see http://developer.mailchimp.com/documentation/mailchimp/reference/ecommerce/stores/customers/#create-post_ecommerce_stores_store_id_customers
 */
function mailchimp_ecommerce_add_customer($customer_id, $email_address, $parameters = array()) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot add a customer without a store ID.');
    }

    // TODO: Get opt-in status from list settings. Default to TRUE for now.
    $opt_in_status = TRUE;

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->addCustomer($store_id, $customer_id, $email_address, $opt_in_status, $parameters);
  }
  catch (Exception $e) {
    watchdog('mailchimp_ecommerce', 'Unable to add a customer: %message', array(
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Update a customer record in Mailchimp.
 *
 * @param string $customer_id
 *  The Unique ID of the customer you are updating.
 * @param $email_address
 *  The customer email address.
 * @param array $parameters
 *  Optional parameters.
 * @see http://developer.mailchimp.com/documentation/mailchimp/reference/ecommerce/stores/customers/#create-post_ecommerce_stores_store_id_customers
 */
function mailchimp_ecommerce_update_customer($customer_id, $email_address, $parameters = array()) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot update a customer without a store ID.');
    }

    // TODO: Get opt-in status from list settings. Default to TRUE for now.
    $opt_in_status = TRUE;

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->updateCustomer($store_id, $customer_id, $email_address, $opt_in_status, $parameters);
  }
  catch (Exception $e) {
    watchdog('mailchimp_ecommerce', 'Unable to update a customer: %message', array(
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Delete a customer from Mailchimp.
 *
 * @param string $customer_id
 *  Unique id of customer.
 */
function mailchimp_ecommerce_delete_customer($customer_id) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot delete a customer without a store ID.');
    }

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->deleteCustomer($store_id, $customer_id);
  }
  catch (Exception $e) {
    watchdog('mailchimp_ecommerce', 'Unable to delete a customer: %message', array(
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
    drupal_set_message($e->getMessage(), 'error');
  }
}

function mailchimp_ecommerce_add_order() {

}

function mailchimp_ecommerce_update_order() {

}

function mailchimp_ecommerce_add_product() {

}

function mailchimp_ecommerce_update_product() {

}

function mailchimp_ecommerce_add_product_variant() {

}

function mailchimp_ecommerce_update_product_variant() {

}

/**
 * Generates a unique ID used to identify a store integration to MailChimp.
 *
 * @return string
 *  The unique store ID.
 */
function mailchimp_ecommerce_generate_store_id() {
  return uniqid();
}

/**
 * Gets the store ID of the MailChimp eCommerce integration.
 *
 * @return string
 *   The store ID.
 */
function mailchimp_ecommerce_get_store_id() {
  return variable_get('mailchimp_ecommerce_store_id', NULL);
}

/**
 * Determines if a MailChimp eCommerce integration is enabled.
 *
 * @return bool
 *   TRUE if an integration is enabled.
 */
function mailchimp_ecommerce_is_enabled() {
  return (variable_get('mailchimp_ecommerce_integration', '') !== '');
}
