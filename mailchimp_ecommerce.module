<?php

/**
 * @file
 * MailChimp eCommerce core functionality.
 */

/**
 * Implements hook_menu().
 */
function mailchimp_ecommerce_menu() {
  $items = array();

  $items['admin/config/services/mailchimp/ecommerce'] = array(
    'title' => t('eCommerce'),
    'description' => t('Configure MailChimp eCommerce.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchimp_ecommerce_admin_settings'),
    'access callback' => 'mailchimp_apikey_ready_access',
    'access arguments' => array('administer mailchimp'),
    'file' => 'includes/mailchimp_ecommerce.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  return $items;
}
/**
 * Implements hook_page_build().
 */
function mailchimp_ecommerce_page_build(&$page) {
  $campaign_id = isset($_GET['mc_cid']) ? check_plain($_GET['mc_cid']) : '';
  $subscriber_id = isset($_GET['mc_eid']) ? check_plain($_GET['mc_eid']) : '';
  if ($campaign_id && $subscriber_id) {
    $_SESSION['mc_cid'] =  $campaign_id;
    $_SESSION['mc_eid'] = $subscriber_id;
  }
}

/**
 * Return information about the store from the supplied id.
 *
 * @param string $store_id
 * @return object
 */
function mailchimp_ecommerce_get_store($store_id) {
  try {
    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    return $mc_ecommerce->getStore($store_id);
  }
  catch (Exception $e) {
    if ($e->getCode() == 404) {
      // Store doesn't exist; no need to log an error.
      return NULL;
    }
    else {
      mailchimp_ecommerce_log_error_message('Unable to get store: ' . $e->getMessage());
      drupal_set_message($e->getMessage(), 'error');
    }
  }
}

/**
 * Add a new store to Mailchimp.
 *
 * @param string $store_id
 * @param string $list_id
 * @param string $name
 * @param string $currency_code
 *  The three-letter ISO 4217 code.
 */
function mailchimp_ecommerce_add_store($store_id, $list_id, $name, $currency_code) {
  try {
    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $store = $mc_ecommerce->addStore($store_id, $list_id, $name, $currency_code);

    module_invoke_all('mailchimp_ecommerce_add_store', $store);
  }
  catch (Exception $e) {
    mailchimp_ecommerce_log_error_message('Unable to add a new store: ' . $e->getMessage());
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Update a store name or currency code.
 *
 * @param string $store_id
 * @param string $name
 * @param string $currency_code
 *  The three-letter ISO 4217 code.
 */
function mailchimp_ecommerce_update_store($store_id, $name, $currency_code) {
  try {
    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->updateStore($store_id, $name, $currency_code);
  }
  catch (Exception $e) {
    mailchimp_ecommerce_log_error_message('Unable to update a store: ' . $e->getMessage());
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Add a new customer to Mailchimp.
 *
 * @param string $customer_id
 *  The unique ID you assign to the user.
 * @param string $email_address
 *  Email address of the user.
 * @param array $parameters
 *  Optional parameters.
 * @see http://developer.mailchimp.com/documentation/mailchimp/reference/ecommerce/stores/customers/#create-post_ecommerce_stores_store_id_customers
 */
function mailchimp_ecommerce_add_customer($customer_id, $email_address, $parameters = array()) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    $list_id = mailchimp_ecommerce_get_list_id();
    if (empty($store_id)) {
      throw new Exception('Cannot add a customer without a store ID.');
    }

    // Pull member information to get member status.
    $memberinfo = mailchimp_get_memberinfo($list_id, $email_address, TRUE);
    $opt_in_status = (isset($memberinfo->status) && ($memberinfo->status == 'subscribed')) ? TRUE : FALSE;

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->addCustomer($store_id, $customer_id, $email_address, $opt_in_status, $parameters);
  }
  catch (Exception $e) {
    mailchimp_ecommerce_log_error_message('Unable to add a customer: ' . $e->getMessage());
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Update a customer record in Mailchimp.
 *
 * @param string $customer_id
 *  The Unique ID of the customer you are updating.
 * @param string $email_address
 *  The customer email address.
 * @param array $parameters
 *  Optional parameters.
 * @see http://developer.mailchimp.com/documentation/mailchimp/reference/ecommerce/stores/customers/#create-post_ecommerce_stores_store_id_customers
 */
function mailchimp_ecommerce_update_customer($customer_id, $email_address, $parameters = array()) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    $list_id = mailchimp_ecommerce_get_list_id();
    if (empty($store_id)) {
      throw new Exception('Cannot update a customer without a store ID.');
    }

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    // Pull member information to get member status.
    $memberinfo = mailchimp_get_memberinfo($list_id, $email_address, TRUE);
    $opt_in_status = (isset($memberinfo->status) && ($memberinfo->status == 'subscribed')) ? TRUE : FALSE;
    $mc_ecommerce->updateCustomer($store_id, $customer_id, $email_address, $opt_in_status, $parameters);
  }
  catch (Exception $e) {
    mailchimp_ecommerce_log_error_message('Unable to update a customer: ' . $e->getMessage());
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Delete a customer from Mailchimp.
 *
 * @param string $customer_id
 *  Unique id of customer.
 */
function mailchimp_ecommerce_delete_customer($customer_id) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot delete a customer without a store ID.');
    }

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->deleteCustomer($store_id, $customer_id);
  }
  catch (Exception $e) {
    mailchimp_ecommerce_log_error_message('Unable to delete a customer: ' . $e->getMessage());
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Adds a new cart to the current MailChimp store.
 *
 * @param string $cart_id
 *  The cart ID.
 * @param array $customer
 *  Associative array of customer information.
 *  - id (string): A unique identifier for the customer.
 * @param array $cart
 *  Associative array of cart information.
 *  - currency_code (string): The three-letter ISO 4217 currency code.
 *  - order_total (float): The total for the order.
 *  - lines (array): An array of the order's line items.
 *
 * @see http://developer.mailchimp.com/documentation/mailchimp/reference/ecommerce/stores/carts/#create-post_ecommerce_stores_store_id_carts
 */
function mailchimp_ecommerce_add_cart($cart_id, array $customer, array $cart) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot add a cart without a store ID.');
    }

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->addCart($store_id, $cart_id, $customer, $cart);
  }
  catch (Exception $e) {
    mailchimp_ecommerce_log_error_message('Unable to add a cart: ' . $e->getMessage());
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Updates an existing cart in the current MailChimp store.
 *
 * @param string $cart_id
 *  The cart ID.
 * @param array $customer
 *  Associative array of customer information.
 *  - id (string): A unique identifier for the customer.
 * @param array $cart
 *  Associative array of cart information.
 *  - currency_code (string): The three-letter ISO 4217 currency code.
 *  - order_total (float): The total for the order.
 *  - lines (array): An array of the order's line items.
 *
 * @see http://developer.mailchimp.com/documentation/mailchimp/reference/ecommerce/stores/carts/#edit-patch_ecommerce_stores_store_id_carts_cart_id
 */
function mailchimp_ecommerce_update_cart($cart_id, array $customer, array $cart) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot update a cart without a store ID.');
    }

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->updateCart($store_id, $cart_id, $customer, $cart);
  }
  catch (Exception $e) {
    mailchimp_ecommerce_log_error_message('Unable to update a cart: ' . $e->getMessage());
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Deletes a cart in the current MailChimp store.
 *
 * @param string $cart_id
 *  The cart ID.
 */
function mailchimp_ecommerce_delete_cart($cart_id) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot delete a cart without a store ID.');
    }

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->deleteCart($store_id, $cart_id);
  }
  catch (Exception $e) {
    mailchimp_ecommerce_log_error_message('Unable to delete a cart: ' . $e->getMessage());
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Adds a line to a cart in the current MailChimp store.
 *
 * @param string $cart_id
 *   The cart ID.
 * @param string $line_id
 *   A unique identifier for the order line item.
 * @param array $product
 *   Associative array of product information.
 *   - product_id (string) The unique identifier for the product.
 *   - product_variant_id (string) The unique identifier for the product variant.
 *   - quantity (int) The quantity of a cart line item.
 *   - price (float) The price of a cart line item.
 */
function mailchimp_ecommerce_add_cart_line($cart_id, $line_id, $product) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot add a cart line without a store ID.');
    }

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->addCartLine($store_id, $cart_id, $line_id, $product);
  }
  catch (Exception $e) {
    mailchimp_ecommerce_log_error_message('Unable to add a cart line: ' . $e->getMessage());
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Updates an existing line in a cart in the current MailChimp store.
 *
 * @param string $cart_id
 *   The cart ID.
 * @param string $line_id
 *   A unique identifier for the order line item.
 * @param array $product
 *   Associative array of product information.
 *   - product_id (string) The unique identifier for the product.
 *   - product_variant_id (string) The unique identifier for the product variant.
 *   - quantity (int) The quantity of a cart line item.
 *   - price (float) The price of a cart line item.
 */
function mailchimp_ecommerce_update_cart_line($cart_id, $line_id, $product) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot update a cart line without a store ID.');
    }

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->updateCartLine($store_id, $cart_id, $line_id, $product);
  }
  catch (Exception $e) {
    mailchimp_ecommerce_log_error_message('Unable to update a cart line: ' . $e->getMessage());
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Deletes a line in a cart in the current MailChimp store.
 *
 * @param string $cart_id
 *   The cart ID.
 * @param string $line_id
 *   A unique identifier for the order line item.
 */
function mailchimp_ecommerce_delete_cart_line($cart_id, $line_id) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot delete a cart line without a store ID.');
    }

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->deleteCartLine($store_id, $cart_id, $line_id);
  }
  catch (Exception $e) {
    mailchimp_ecommerce_log_error_message('Unable to delete a cart line: ' . $e->getMessage());
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Adds a new order to the current MailChimp store.
 *
 * @param string $order_id
 *  The order ID.
 * @param array $customer
 *  Associative array of customer information.
 *  - id (string): A unique identifier for the customer.
 * @param array $order
 *  Associative array of order information.
 *  - currency_code (string): The three-letter ISO 4217 currency code.
 *  - order_total (float): The total for the order.
 *  - lines (array): An array of the order's line items.
 *
 * @see http://developer.mailchimp.com/documentation/mailchimp/reference/ecommerce/stores/orders/#create-post_ecommerce_stores_store_id_orders
 */
function mailchimp_ecommerce_add_order($order_id, array $customer, array $order) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot add an order without a store ID.');
    }

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->addOrder($store_id, $order_id, $customer, $order);
  }
  catch (Exception $e) {
    mailchimp_ecommerce_log_error_message('Unable to add an order: ' . $e->getMessage());
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Updates an existing order in the current MailChimp store.
 *
 * @param string $order_id
 *  The order ID.
 * @param array $customer
 *  Associative array of customer information.
 *  - id (string): A unique identifier for the customer.
 * @param array $order
 *  Associative array of order information.
 *  - currency_code (string): The three-letter ISO 4217 currency code.
 *  - order_total (float): The total for the order.
 *  - lines (array): An array of the order's line items.
 *
 * @see http://developer.mailchimp.com/documentation/mailchimp/reference/ecommerce/stores/orders/#edit-patch_ecommerce_stores_store_id_orders_order_id
 */
function mailchimp_ecommerce_update_order($order_id, array $customer, array $order) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot update an order without a store ID.');
    }

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->updateOrder($store_id, $order_id, $customer, $order);
  }
  catch (Exception $e) {
    mailchimp_ecommerce_log_error_message('Unable to update an order: ' . $e->getMessage());
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Adds a product to MailChimp.
 *
 * Adds a product variant if a product with the given ID exists.
 *
 * In MailChimp, each product requires at least one product variant. This
 * function will create a single product variant when creating new products.
 *
 * A product variant is contained within a product and can be used to
 * represent shirt size, color, etc.
 *
 * @param string $product_id
 *   Unique ID of the product.
 * @param string $product_variant_id
 *   ID of the product variant.
 *   May be identical to $product_id for single products.
 * @param string $title
 *   The product title.
 * @param string $description
 *   The product description.
 * @param string $type
 *   The product type.
 * @param string $sku
 *   The product SKU.
 * @param float $price
 *   The product price
 */
function mailchimp_ecommerce_add_product($product_id, $product_variant_id, $title, $description, $type, $sku, $price) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot add a product without a store ID.');
    }

    // TRUE when a new product is created, false if a product variant is added.
    $new_product = FALSE;

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');

    // Create MailChimp product from product type.
    try {
      $mc_ecommerce->getProduct($store_id, $product_id);
    }
    catch (Exception $e) {
      if ($e->getCode() == 404) {
        // No existing product; create new product with default variant.
        $variant = (object) [
          'id' => $product_variant_id,
          'title' => $title,
          'sku' => $sku,
          'price' => $price,
        ];

        $mc_ecommerce->addProduct($store_id, $product_id, $title, [$variant], [
          'description' => $description,
          'type' => $type,
        ]);

        $new_product = TRUE;
      }
      else {
        // An actual error occurred; pass on the exception.
        throw new Exception($e->getMessage(), $e->getCode(), $e);
      }
    }

    if (!$new_product) {
      // Add a variant to an existing product.
      $mc_ecommerce->addProductVariant($store_id, $product_id, [
        'id' => $product_variant_id,
        'title' => $title,
        'sku' => $sku,
        'price' => $price,
      ]);
    }
  }
  catch (Exception $e) {
    mailchimp_ecommerce_log_error_message('Unable to add a product: ' . $e->getMessage());
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Updates an existing product in MailChimp.
 *
 * MailChimp only allows for product variants to be updated. The parent
 * product cannot be changed once created. This function will update the
 * variant associated with the given product ID and SKU.
 *
 * @param string $product_id
 *   Unique ID of the product.
 * @param string $product_variant_id
 *   ID of the product variant.
 *   May be identical to $product_id for single products.
 * @param string $title
 *   The product title.
 * @param string $sku
 *   The product SKU.
 * @param float $price
 *   The product price
 */
function mailchimp_ecommerce_update_product($product_id, $product_variant_id, $title, $sku, $price) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot update a product without a store ID.');
    }

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->updateProductVariant($store_id, $product_id, $product_variant_id, [
      'title' => $title,
      'sku' => $sku,
      'price' => $price,
    ]);
  }
  catch (Exception $e) {
    mailchimp_ecommerce_log_error_message('Unable to update product: ' . $e->getMessage());
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Deletes a product in MailChimp.
 *
 * @param string $product_id
 *   Unique ID of the product.
 */
function mailchimp_ecommerce_delete_product($product_id) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot delete a product without a store ID.');
    }

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->deleteProduct($store_id, $product_id);
  }
  catch (Exception $e) {
    mailchimp_ecommerce_log_error_message('Unable to delete product: ' . $e->getMessage());
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Deletes a product variant in MailChimp.
 *
 * Automatically deletes the product if the only product variant is removed.
 *
 * @param string $product_id
 *   Unique ID of the product.
 * @param $product_variant_id
 *   ID of the product variant.
 *   Can be identical to $product_id for single products.
 */
function mailchimp_ecommerce_delete_product_variant($product_id, $product_variant_id) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot delete a product variant without a store ID.');
    }

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');

    try {
      $variants = $mc_ecommerce->getProductVariants($store_id, $product_id);

      // Delete the variant if the product contains multiple variants.
      if ($variants->total_items > 1) {
        $mc_ecommerce->deleteProductVariant($store_id, $product_id, $product_variant_id);
      }
      else {
        // Delete the product if the product has only one variant.
        $mc_ecommerce->deleteProduct($store_id, $product_id);
      }
    }
    catch (Exception $e) {
      if ($e->getCode() == 404) {
        // This product isn't in MailChimp.
        return;
      }
      else {
        // An actual error occurred; pass on the exception.
        throw new Exception($e->getMessage(), $e->getCode(), $e);
      }
    }
  }
  catch (Exception $e) {
    mailchimp_ecommerce_log_error_message('Unable to delete product variant: ' . $e->getMessage());
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Generates a unique ID used to identify a store integration to MailChimp.
 *
 * @return string
 *  The unique store ID.
 */
function mailchimp_ecommerce_generate_store_id() {
  return uniqid();
}

/**
 * Gets the store ID of the MailChimp eCommerce integration.
 *
 * @return string
 *   The store ID.
 */
function mailchimp_ecommerce_get_store_id() {
  return variable_get('mailchimp_ecommerce_store_id', NULL);
}

/**
 * Determines if a MailChimp eCommerce integration is enabled.
 *
 * @return bool
 *   TRUE if an integration is enabled.
 */
function mailchimp_ecommerce_is_enabled() {
  return (variable_get('mailchimp_ecommerce_integration', '') !== '');
}

/**
 * Get the List ID being used.
 *
 * @return string
 *  The List ID.
 */
function mailchimp_ecommerce_get_list_id(){
  return variable_get('mailchimp_ecommerce_list_id', '');
}

/**
 * Returns currency codes from the xml file.
 *
 * This is used if Drupal Commerce is not available.
 *
 * @return array
 */
function mailchimp_ecommerce_get_currency_codes() {

  $currencyfile = drupal_get_path('module', 'mailchimp_ecommerce') . '/' . 'currency-codes-iso4217.xml';
  $currencydata = simplexml_load_file($currencyfile);
  $json_string = json_encode($currencydata);
  $result_array = json_decode($json_string, TRUE);
  $currencycodes = [];
  foreach ($result_array['CcyTbl']['CcyNtry'] as $item) {
    if (!empty($item['Ccy'])) {
      $currencycodes[$item['Ccy']] = $item['CcyNm'] . ' (' . $item['Ccy'] . ')';
    }
  }
  return $currencycodes;
}

/**
 * Logs an error message using watchdog, if enabled.
 *
 * @param string $message
 *   The error message to log.
 */
function mailchimp_ecommerce_log_error_message($message) {
  if (function_exists('watchdog')) {
    watchdog('mailchimp_ecommerce', '%message', array(
      '%message' => $message,
    ), WATCHDOG_ERROR);
  }
}
