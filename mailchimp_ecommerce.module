<?php

/**
 * @file
 * MailChimp eCommerce core functionality.
 */

/**
 * Implements hook_menu().
 */
function mailchimp_ecommerce_menu() {
  $items = array();

  $items['admin/config/services/mailchimp/ecommerce'] = array(
    'title' => t('eCommerce'),
    'description' => t('Configure MailChimp eCommerce.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchimp_ecommerce_admin_settings'),
    'access callback' => 'mailchimp_apikey_ready_access',
    'access arguments' => array('administer mailchimp'),
    'file' => 'includes/mailchimp_ecommerce.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  return $items;
}

/**
 * Return information about the store from the supplied id.
 *
 * @param string $store_id
 * @return object
 */
function mailchimp_ecommerce_get_store($store_id) {
  try {
    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    return $mc_ecommerce->getStore($store_id);
  }
  catch (Exception $e) {
    watchdog('mailchimp_ecommerce', 'Unable to get store: %message', array(
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Add a new store to Mailchimp.
 *
 * @param string $store_id
 * @param string $list_id
 * @param string $name
 * @param string $currency_code
 *  The three-letter ISO 4217 code.
 */
function mailchimp_ecommerce_add_store($store_id, $list_id, $name, $currency_code) {
  try {
    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->addStore($store_id, $list_id, $name, $currency_code);
  }
  catch (Exception $e) {
    watchdog('mailchimp_ecommerce', 'Unable to add a new store: %message', array(
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Update a store name or currency code.
 *
 * @param string $store_id
 * @param string $name
 * @param string $currency_code
 *  The three-letter ISO 4217 code.
 */
function mailchimp_ecommerce_update_store($store_id, $name, $currency_code) {
  try {
    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->updateStore($store_id, $name, $currency_code);
  }
  catch (Exception $e) {
    watchdog('mailchimp_ecommerce', 'Unable to update a store: %message', array(
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Add a new customer to Mailchimp.
 *
 * @param string $customer_id
 *  The unique ID you assign to the user.
 * @param string $email_address
 *  Email address of the user.
 * @param array $parameters
 *  Optional parameters.
 * @see http://developer.mailchimp.com/documentation/mailchimp/reference/ecommerce/stores/customers/#create-post_ecommerce_stores_store_id_customers
 */
function mailchimp_ecommerce_add_customer($customer_id, $email_address, $parameters = array()) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    $list_id = mailchimp_ecommerce_get_list_id();
    if (empty($store_id)) {
      throw new Exception('Cannot add a customer without a store ID.');
    }

    // Pull member information to get member status.
    $memberinfo = mailchimp_get_memberinfo($list_id, $email_address, TRUE);
    $opt_in_status = ($memberinfo['status'] == 'subscribed') ? TRUE : FALSE;

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->addCustomer($store_id, $customer_id, $email_address, $opt_in_status, $parameters);
  }
  catch (Exception $e) {
    watchdog('mailchimp_ecommerce', 'Unable to add a customer: %message', array(
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Update a customer record in Mailchimp.
 *
 * @param string $customer_id
 *  The Unique ID of the customer you are updating.
 * @param string $email_address
 *  The customer email address.
 * @param array $parameters
 *  Optional parameters.
 * @see http://developer.mailchimp.com/documentation/mailchimp/reference/ecommerce/stores/customers/#create-post_ecommerce_stores_store_id_customers
 */
function mailchimp_ecommerce_update_customer($customer_id, $email_address, $parameters = array()) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    $list_id = mailchimp_ecommerce_get_list_id();
    if (empty($store_id)) {
      throw new Exception('Cannot update a customer without a store ID.');
    }

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    // Pull member information to get member status.
    $memberinfo = mailchimp_get_memberinfo($list_id, $email_address, TRUE);
    $opt_in_status = ($memberinfo['status'] == 'subscribed') ? TRUE : FALSE;
    $mc_ecommerce->updateCustomer($store_id, $customer_id, $email_address, $opt_in_status, $parameters);
  }
  catch (Exception $e) {
    watchdog('mailchimp_ecommerce', 'Unable to update a customer: %message', array(
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Delete a customer from Mailchimp.
 *
 * @param string $customer_id
 *  Unique id of customer.
 */
function mailchimp_ecommerce_delete_customer($customer_id) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot delete a customer without a store ID.');
    }

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->deleteCustomer($store_id, $customer_id);
  }
  catch (Exception $e) {
    watchdog('mailchimp_ecommerce', 'Unable to delete a customer: %message', array(
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
    drupal_set_message($e->getMessage(), 'error');
  }
}

function mailchimp_ecommerce_add_order() {

}

function mailchimp_ecommerce_update_order() {

}

/**
 * Adds a product to MailChimp.
 *
 * In MailChimp, each product requires at least one product variant. This
 * function will create a default product variant if one does not exist.
 *
 * Variants are products that share the same ID as an existing product.
 * This could represent shirt size, color, etc.
 *
 * @param string $product_id
 *   Unique ID of the product.
 * @param string $title
 *   The product title.
 * @param string $description
 *   The product description.
 * @param string $type
 *   The product type.
 * @param string $sku
 *   The product SKU.
 * @param float $price
 *   The product price
 */
function mailchimp_ecommerce_add_product($product_id, $title, $description, $type, $sku, $price) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot add a product without a store ID.');
    }

    // TRUE when a new product is created, false if a product variant is added.
    $new_product = FALSE;

    // Use the product SKU as the variant ID to allow variants with the
    // same product ID, as is standard in Drupal Commerce.
    $variant_product_id = $sku;

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');

    // Create MailChimp product from product type.
    try {
      $mc_ecommerce->getProduct($store_id, $product_id);
    }
    catch (Exception $e) {
      if ($e->getCode() == 404) {
        // No existing product; create new product with default variant.
        $variant = (object) [
          'id' => $variant_product_id,
          'title' => $title,
          'sku' => $sku,
          'price' => $price,
        ];

        $mc_ecommerce->addProduct($store_id, $product_id, $title, [$variant], [
          'description' => $description,
          'type' => $type,
        ]);

        $new_product = TRUE;
      }
      else {
        // An actual error occurred; pass on the exception.
        throw new Exception($e->getMessage(), $e->getCode(), $e);
      }
    }

    if (!$new_product) {
      // Add a variant to an existing product.
      $mc_ecommerce->addProductVariant($store_id, $product_id, [
        'id' => $variant_product_id,
        'title' => $title,
        'sku' => $sku,
        'price' => $price,
      ]);
    }
  }
  catch (Exception $e) {
    watchdog('mailchimp_ecommerce', 'Unable to add a product: %message', array(
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Updates an existing product in MailChimp.
 *
 * MailChimp only allows for product variants to be updated. The parent
 * product cannot be changed once created. This function will update the
 * variant associated with the given product ID and SKU.
 *
 * @param string $product_id
 *   Unique ID of the product.
 * @param string $title
 *   The product title.
 * @param string $sku
 *   The product SKU.
 * @param float $price
 *   The product price
 */
function mailchimp_ecommerce_update_product($product_id, $title, $sku, $price) {
  try {
    $store_id = mailchimp_ecommerce_get_store_id();
    if (empty($store_id)) {
      throw new Exception('Cannot update a product without a store ID.');
    }

    /* @var \Mailchimp\MailchimpEcommerce $mc_ecommerce */
    $mc_ecommerce = mailchimp_get_api_object('MailchimpEcommerce');
    $mc_ecommerce->updateProductVariant($store_id, $product_id, $sku, [
      'title' => $title,
      'price' => $price,
    ]);
  }
  catch (Exception $e) {
    watchdog('mailchimp_ecommerce', 'Unable to update product: %message', array(
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Generates a unique ID used to identify a store integration to MailChimp.
 *
 * @return string
 *  The unique store ID.
 */
function mailchimp_ecommerce_generate_store_id() {
  return uniqid();
}

/**
 * Gets the store ID of the MailChimp eCommerce integration.
 *
 * @return string
 *   The store ID.
 */
function mailchimp_ecommerce_get_store_id() {
  return variable_get('mailchimp_ecommerce_store_id', NULL);
}

/**
 * Determines if a MailChimp eCommerce integration is enabled.
 *
 * @return bool
 *   TRUE if an integration is enabled.
 */
function mailchimp_ecommerce_is_enabled() {
  return (variable_get('mailchimp_ecommerce_integration', '') !== '');
}

/**
 * Get the List ID being used.
 *
 * @return string
 *  The List ID.
 */
function mailchimp_ecommerce_get_list_id(){
  return variable_get('mailchimp_ecommerce_list_id', '');
}

/**
 * Returns currency codes from the xml file.
 *
 * This is used if Drupal Commerce is not available.
 *
 * @return array
 */
function mailchimp_ecommerce_get_currency_codes() {

  $currencyfile = drupal_get_path('module', 'mailchimp_ecommerce') . '/' . 'currency-codes-iso4217.xml';
  $currencydata = simplexml_load_file($currencyfile);
  $json_string = json_encode($currencydata);
  $result_array = json_decode($json_string, TRUE);
  $currencycodes = [];
  foreach ($result_array['CcyTbl']['CcyNtry'] as $item) {
    if (!empty($item['Ccy'])) {
      $currencycodes[$item['Ccy']] = $item['CcyNm'] . ' (' . $item['Ccy'] . ')';
    }
  }
  return $currencycodes;
}
