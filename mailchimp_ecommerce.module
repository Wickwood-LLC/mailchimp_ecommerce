<?php

/**
 * @file
 * MailChimp eCommerce core functionality.
 */

/**
 * Implements hook_page_build().
 */
function mailchimp_ecommerce_page_build(&$page) {
  $campaign_id = isset($_GET['mc_cid']) ? \Drupal\Component\Utility\Html::escape($_GET['mc_cid']) : '';
  if ($campaign_id) {
    $_SESSION['mc_cid'] = $campaign_id;
  }
}

/**
 * Generates a unique ID used to identify a store integration to MailChimp.
 *
 * @return string
 *   The unique store ID.
 */
function mailchimp_ecommerce_generate_store_id() {
  return uniqid();
}

/**
 * Gets the store ID of the MailChimp eCommerce integration.
 *
 * @return string
 *   The store ID.
 */
function mailchimp_ecommerce_get_store_id() {
  return \Drupal::config('mailchimp_ecommerce.settings')->get('mailchimp_ecommerce_store_id');
}

/**
 * Gets the campaign ID from the current user's session.
 *
 * @return string
 *   The campaign ID.
 */
function mailchimp_ecommerce_get_campaign_id() {
  $session_campaign = isset($_SESSION['mc_cid']) ? \Drupal\Component\Utility\Html::escape($_SESSION['mc_cid']) : '';
  $campaign_id = '';

  /* @var \Mailchimp\MailchimpCampaigns $mc_campaigns */
  $mc_campaigns = mailchimp_get_api_object('MailchimpCampaigns');

  // Check to see if this is a valid MailChimp campaign.
  try {
    if (!empty($session_campaign)) {
      $campaign = $mc_campaigns->getCampaign($session_campaign);
      $campaign_id = $campaign->id;
    }
  }
  catch (Exception $e) {
    if ($e->getCode() == 404) {
      // Campaign doesn't exist; no need to log an error.
    }
    else {
      mailchimp_ecommerce_log_error_message('Unable to get campaign: ' . $e->getMessage());
      drupal_set_message($e->getMessage(), 'error');
    }
  }

  return $campaign_id;
}

/**
 * Determines if a MailChimp eCommerce integration is enabled.
 *
 * @return bool
 *   TRUE if an integration is enabled.
 */
function mailchimp_ecommerce_is_enabled() {
  return (\Drupal::config('mailchimp_ecommerce.settings')->get('mailchimp_ecommerce_integration') !== '');
}

/**
 * Determines if customer data is valid.
 *
 * @param array $customer
 *   Array of customer data.
 *
 * @return bool
 *   TRUE if customer data is valid.
 */
function mailchimp_ecommerce_validate_customer(array $customer) {
  return (isset($customer['id']) && !empty($customer['id']));
}

/**
 * Get the List ID being used.
 *
 * @return string
 *   The List ID.
 */
function mailchimp_ecommerce_get_list_id() {
  return \Drupal::config('mailchimp_ecommerce.settings')->get('mailchimp_ecommerce_list_id');
}

/**
 * Returns currency codes from the xml file.
 *
 * This is used if Drupal Commerce is not available.
 *
 * @return array
 *   Array of currency codes.
 */
function mailchimp_ecommerce_get_currency_codes() {
  $currencyfile = drupal_get_path('module', 'mailchimp_ecommerce') . '/' . 'currency-codes-iso4217.xml';
  $currencydata = simplexml_load_file($currencyfile);
  $json_string = json_encode($currencydata);
  $result_array = json_decode($json_string, TRUE);
  $currencycodes = [];
  foreach ($result_array['CcyTbl']['CcyNtry'] as $item) {
    if (!empty($item['Ccy'])) {
      $currencycodes[$item['Ccy']] = $item['CcyNm'] . ' (' . $item['Ccy'] . ')';
    }
  }
  return $currencycodes;
}

/**
 * Logs an error message using watchdog, if enabled.
 *
 * @param string $message
 *   The error message to log.
 */
function mailchimp_ecommerce_log_error_message($message) {
  if (function_exists('watchdog')) {
    \Drupal::logger('mailchimp_ecommerce')->error('%message', array(
      '%message' => $message,
    ));
  }
}
