<?php

/**
 * @file
 * Integrates Drupal Commerce with MailChimp eCommerce.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mailchimp_ecommerce_commerce_form_mailchimp_ecommerce_admin_settings_alter(&$form, &$form_state) {
  $form['mailchimp_ecommerce_integration']['#options']['commerce'] = t('Drupal Commerce');

  // Add submit handler as first element in submit array.
  array_unshift($form['#submit'], 'mailchimp_ecommerce_commerce_integration_admin_settings_submit');
}

/**
 * Submit handler for the MailChimp eCommerce settings form.
 */
function mailchimp_ecommerce_commerce_integration_admin_settings_submit($form, &$form_state) {
  if (variable_get('mailchimp_ecommerce_store_id', NULL) == NULL) {
    $store_id = mailchimp_ecommerce_generate_store_id();
    variable_set('mailchimp_ecommerce_store_id', $store_id);
  }
}

/**
 * Implements hook_commerce_customer_profile_insert().
 */
function mailchimp_ecommerce_commerce_commerce_customer_profile_insert($customer_profile) {
  if (!mailchimp_ecommerce_is_enabled()) {
    return;
  }

  $first_name = '';
  $last_name = '';
  $user = user_load($customer_profile->uid);

  $customer_profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $customer_profile);

  if (isset($customer_profile_wrapper->commerce_customer_address->first_name) &&
      isset($customer_profile_wrapper->commerce_customer_address->last_name)) {
      $first_name = $customer_profile_wrapper->commerce_customer_address->first_name->value();
      $last_name = $customer_profile_wrapper->commerce_customer_address->last_name->value();
  }
  $parameters = [
    'first_name' => $first_name,
    'last_name' => $last_name,
    'address' => mailchimp_ecommerce_commerce_parse_customer_profile_address($customer_profile_wrapper),
  ];

  mailchimp_ecommerce_add_customer($user->uid, $user->mail, $parameters);
}

/**
 * Implements hook_commerce_customer_profile_update().
 */
function mailchimp_ecommerce_commerce_commerce_customer_profile_update($customer_profile) {
  if (!mailchimp_ecommerce_is_enabled()) {
    return;
  }
  $parameters = [];
  $first_name = '';
  $last_name = '';
  $user = user_load($customer_profile->uid);

  $customer_profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $customer_profile);

  if (isset($customer_profile_wrapper->commerce_customer_address->first_name) &&
    isset($customer_profile_wrapper->commerce_customer_address->last_name)) {
    $first_name = $customer_profile_wrapper->commerce_customer_address->first_name->value();
    $last_name = $customer_profile_wrapper->commerce_customer_address->last_name->value();
  }

  $parameters = [
    'first_name' => $first_name,
    'last_name' => $last_name,
    'address' => mailchimp_ecommerce_commerce_parse_customer_profile_address($customer_profile_wrapper),
  ];

  mailchimp_ecommerce_update_customer($customer_profile->profile_id, $user->mail, $parameters);
}

/**
 * Implements hook_commerce_customer_profile_delete().
 */
function mailchimp_ecommerce_commerce_commerce_customer_profile_delete($customer_profile) {
  if (!mailchimp_ecommerce_is_enabled()) {
    return;
  }

  mailchimp_ecommerce_delete_customer($customer_profile->profile_id);
}

/**
 * Implements hook_commerce_cart_order_refresh().
 */
function mailchimp_ecommerce_commerce_commerce_cart_order_refresh($order_wrapper) {

}

/**
 * Implements hook_commerce_checkout_complete().
 */
function mailchimp_ecommerce_commerce_commerce_checkout_complete($order) {
  global $user;

  $campaign_id = '';
  $currency_code = '';
  $order_total = '';
  $billing_address = [];
  $product_ids = [];

  $lines = [];
  $parameters = [];

  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  if (isset($wrapper->commerce_order_total->currency_code)) {
    $currency_code = $wrapper->commerce_order_total->currency_code->value();
  }
  if (isset($wrapper->commerce_order_total->amount)) {
    $order_total = $wrapper->commerce_order_total->amount->value();
  }
  if (isset($wrapper->commerce_customer_billing->commerce_customer_address)) {
    $commerce_billing_address = $wrapper->commerce_customer_billing->commerce_customer_address->value();
    if ($commerce_billing_address['organisation_name'] == null) {
      $commerce_billing_address['organisation_name'] = '';
    }

    $billing_address = [
      'name' => $commerce_billing_address['name_line'],
      'address1' => $commerce_billing_address['thoroughfare'],
      'address2' => $commerce_billing_address['premise'],
      'city' => $commerce_billing_address['locality'],
      'province_code' => $commerce_billing_address['administrative_area'],
      'postal_code' => $commerce_billing_address['postal_code'],
      'country_code' => $commerce_billing_address['country'],
      'company' => $commerce_billing_address['organisation_name'],
    ];
  }

  foreach ($wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $products[] = $line_item_wrapper->commerce_product;
      $line = [
        'id' => $line_item_wrapper->getIdentifier(),
        'product_id' => $line_item_wrapper->commerce_product->raw(),
        'product_variant_id' => $line_item_wrapper->commerce_product->sku->value(),
        'quantity' => (int) $line_item_wrapper->quantity->value(),
        'price' => $line_item_wrapper->commerce_unit_price->amount->value(),
      ];
      $lines[] = $line;
    }
  }

  $customer = [
    'id' => $user->uid,
  ];

  $order_data = [
    'currency_code' => $currency_code,
    'order_total' => $order_total,
    'billing_address' => $billing_address,
    'lines' => $lines,
  ];

  mailchimp_ecommerce_add_order($order->order_id, $customer, $order_data);
}

/**
 * Implements hook_commerce_product_insert().
 */
function mailchimp_ecommerce_commerce_commerce_product_insert($product) {
  $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
  $price = commerce_currency_amount_to_decimal($product_wrapper->commerce_price->amount->value(), $product_wrapper->commerce_price->currency_code->value());
  // TODO: Get product description from product display, if available.
  mailchimp_ecommerce_add_product($product->product_id, $product->sku, $product->title, '', $product->type, $product->sku, $price);
}

/**
 * Implements hook_commerce_product_update().
 */
function mailchimp_ecommerce_commerce_commerce_product_update($product) {
  $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
  $price = commerce_currency_amount_to_decimal($product_wrapper->commerce_price->amount->value(), $product_wrapper->commerce_price->currency_code->value());
  mailchimp_ecommerce_update_product($product->product_id, $product->sku, $product->title, $product->sku, $price);
}

/**
 * Implements hook_commerce_product_delete().
 */
function mailchimp_ecommerce_commerce_commerce_product_delete($product) {
  mailchimp_ecommerce_delete_product_variant($product->product_id, $product->sku);
}

/**
 * Implements hook_mailchimp_ecommerce_add_store().
 */
function mailchimp_ecommerce_commerce_mailchimp_ecommerce_add_store($store) {
  // Add existing Drupal Commerce products to MailChimp.
  $batch = [
    'title' => t('Adding products to MailChimp'),
    'operations' => [],
  ];

  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'commerce_product')
    ->execute();

  if (isset($result['commerce_product'])) {
    $product_ids = array_keys($result['commerce_product']);

    $progress = 1;
    foreach ($product_ids as $product_id) {
      $batch['operations'][] = [
        'mailchimp_ecommerce_commerce_batch_add_product',
        [
          $product_id,
        ],
      ];

      $progress++;
    }
  }

  batch_set($batch);
}

/**
 * Batch callback used to add a product to MailChimp.
 */
function mailchimp_ecommerce_commerce_batch_add_product($product_id, &$context) {
  $product = commerce_product_load($product_id);
  mailchimp_ecommerce_commerce_commerce_product_insert($product);
}

/**
 * Parses an address from a Commerce customer profile.
 *
 * @param object $customer_profile_wrapper
 *   Commerce customer profile object.
 *
 * @return object
 *   Address object in a MailChimp-friendly format.
 */
function mailchimp_ecommerce_commerce_parse_customer_profile_address($customer_profile_wrapper) {
  $address = [];

  if (isset($customer_profile_wrapper->commerce_customer_address->thoroughfare) &&
      isset($customer_profile_wrapper->commerce_customer_address->premise) &&
      isset($customer_profile_wrapper->commerce_customer_address->locality) &&
      isset($customer_profile_wrapper->commerce_customer_address->administrative_area) &&
      isset($customer_profile_wrapper->commerce_customer_address->postal_code) &&
      isset($customer_profile_wrapper->commerce_customer_address->country)) {
    $address = (object) [
      'address1' => $customer_profile_wrapper->commerce_customer_address->thoroughfare->value(),
      'address2' => $customer_profile_wrapper->commerce_customer_address->premise->value(),
      'city' => $customer_profile_wrapper->commerce_customer_address->locality->value(),
      'province_code' => $customer_profile_wrapper->commerce_customer_address->administrative_area->value(),
      'postal_code' => $customer_profile_wrapper->commerce_customer_address->postal_code->value(),
      'country_code' => $customer_profile_wrapper->commerce_customer_address->country->value(),
    ];
  }

  return $address;
}
