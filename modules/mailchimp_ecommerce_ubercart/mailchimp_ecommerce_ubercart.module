<?php

use Drupal\uc_order\Entity\Order;
use Drupal\uc_order\OrderInterface;
use Drupal\mailchimp_ecommerce\CartHandler;
use Drupal\mailchimp_ecommerce\CustomerHandler;
use Drupal\mailchimp_ecommerce\OrderHandler;
use Drupal\mailchimp_ecommerce\ProductHandler;

/**
 * @file
 * Integrates Ubercart with MailChimp eCommerce.
 */

/**
 * Implements hook_node_insert().
 */
function mailchimp_ecommerce_ubercart_node_insert(\Drupal\node\NodeInterface $node) {
  if ($node->getType() == 'product') {
    // Create a corresponding MailChimp product.
    $product_handler = new ProductHandler;
    $product = $product_handler->buildProductFromNode($node);

    $product_handler->addProduct($product['id'], $product['title'], $product['description'], $product['type'], $product['variants']);
  }
}

/**
 * Implements hook_node_update().
 */
function mailchimp_ecommerce_ubercart_node_update(\Drupal\node\NodeInterface $node) {
  if ($node->getType() == 'product') {
    // Update the corresponding MailChimp product.

    $product_handler = new ProductHandler;
    $product = $product_handler->buildProductFromNode($node);

    $product_handler->addProduct($product['id'], $product['title'], $product['description'], $product['type'], $product['variants']);
  }
}

/**
 * Implements hook_node_delete().
 */
function mailchimp_ecommerce_ubercart_node_delete(\Drupal\node\NodeInterface $node) {
  if ($node->getType() == 'product') {
    // Delete the corresponding MailChimp product.
    $product_handler = new ProductHandler;
    $product = $product_handler->buildProductFromNode($node);

    $product_handler->deleteProductVariant($product['id'], $product['variant_id']);
  }
}

/**
 * Implements hook_mailchimp_ecommerce_add_store().
 */
function mailchimp_ecommerce_ubercart_mailchimp_ecommerce_add_store($store) {
  // Add existing Ubercart products to MailChimp.
  $batch = [
    'title' => t('Adding products to MailChimp'),
    'operations' => [],
  ];

  $products = \Drupal::entityManager()->getStorage('node')->loadByProperties([
    'type' => 'product',
  ]);

  if (!empty($products)) {
    $product_ids = array_keys($products);

    foreach ($product_ids as $product_id) {
      $batch['operations'][] = [
        'mailchimp_ecommerce_ubercart_batch_add_product',
        [
          $product_id,
        ],
      ];
    }
  }

  batch_set($batch);
}

/**
 * Batch callback used to add a product to MailChimp.
 */
function mailchimp_ecommerce_ubercart_batch_add_product($product_id, &$context) {
  $node = Node::load($product_id);
  $product_handler = new ProductHandler;
  $product = $product_handler->buildProductFromNode($node);

  $product_handler->addProduct($product['id'], $product['title'], $product['description'], $product['type'], $product['variants']);
}

/**
 * Implements hook_uc_order_create().
 */
function mailchimp_ecommerce_ubercart_entity_insert(\Drupal\Core\Entity\EntityInterface $entity) {
}

/**
 * Implements hook_uc_order_create().
 */
/**
 * Implements hook_entity_update().
 */
function mailchimp_ecommerce_ubercart_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  $hi = 'huh?';
}

/**
 * Implements hook_uc_add_to_cart().
 */
function mailchimp_ecommerce_ubercart_uc_add_to_cart($nid, $qty, $data) {
  $hi = 'wat?';
  // this on cart add
}

/**
 * Implements hook_uc_add_to_cart_data().
 */
function mailchimp_ecommerce_ubercart_uc_add_to_cart_data($form_values) {
  $hi = 'wat?';
  // on cart add
}

/**
 * Implements hook_uc_cart_item_insert().
 */
function mailchimp_ecommerce_ubercart_uc_cart_item_insert($entity) {

  $hi = 'what';
}

/**
 * Implements hook_uc_cart_item_update().
 */
function mailchimp_ecommerce_ubercart_uc_cart_item_update($entity) {
  $qty = $entity->qty->value;
  $price = $entity->price->value;
  $data = $entity->data->value;
  // on cart update
}
/**
 * Implements hook_uc_cart_checkout_start().
 */
function mailchimp_ecommerce_ubercart_uc_cart_checkout_start($order) {
  // This on checkout start
  // This on set address
  // This on review order

  // Do nothing with no email.
  if (!$order->getEmail()) {
    return;
  }
  $customer_handler = new customerHandler(\Drupal::database());
  $cart_handler = new cartHandler;
  $order_handler = new orderHandler;

  $mc_data = $order_handler->buildUberOrder($order);
  $cart_handler->addOrUpdateCart($order->id(), $mc_data['customer'], $mc_data['order_data']);
}

/**
 * Implements hook_uc_checkout_complete().
 */
function mailchimp_ecommerce_ubercart_uc_checkout_complete($order, $account) {
  if (!$order->getEmail()) {
    return;
  }
  $customer_handler = new customerHandler(\Drupal::database());
  $cart_handler = new cartHandler;
  $order_handler = new orderHandler;

  $cart_handler->deleteCart($order->id());
  $mc_data = $order_handler->buildUberOrder($order);

  // Update the customer's total order count and total amount spent.
  $customer_handler->incrementCustomerOrderTotal($mc_data['customer']['email_address'], $mc_data['order_data']['order_total']);

  $cart_handler->addOrUpdateCart($order->id(), $mc_data['customer'], $mc_data['order_data']);
  $order_handler->addOrder($order->id(), $mc_data['customer'], $mc_data['order_data']);
}

/**
 * Implements hook_uc_order_create().
 */
function mailchimp_ecommerce_ubercart_cartitem_create(\Drupal\Core\Entity\EntityInterface $entity) {
  $hi = 'hi';
}

/**
 * Implements hook_uc_order_product_insert().
 */
function mailchimp_ecommerce_ubercart_uc_order_product_insert($order_product) {
 $hi = 'wat';
}

function mailchimp_ecommerce_ubertcart_uc_order_product_create($order_product) {
  $hi = 'wat';
}

function mailchimp_ecommerce_ubertcart_uc_order_create($order) {
  $hi = 'wat';
}

  /* TODO new hook for update
  elseif ($op == 'save') {

    // Update cart in MailChimp.
    $cart_handler->addOrUpdateCart($order->order_id, $mc_order['customer'], $mc_order['order_data']);

  }
  TODO: New hook for complete
  elseif ($op  == 'update') {
    if ($order->order_status == 'in_checkout') {

      // Convert cart to order in MailChimp.
      $cart_handler->deleteCart($order->order_id);
      $order_handler->addOrder($order->order_id, $mc_order['customer'], $mc_order['order_data']);
    }
  }
}
*/

// TODO: Implement mailchimp_ecommerce_update_customer()
// TODO: Implement mailchimp_ecommerce_delete_customer()
// TODO: Implement mailchimp_ecommerce_get_customer()
