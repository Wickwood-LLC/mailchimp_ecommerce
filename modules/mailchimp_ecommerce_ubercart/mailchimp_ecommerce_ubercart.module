<?php

/**
 * @file
 * Integrates Ubercart with MailChimp eCommerce.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mailchimp_ecommerce_ubercart_form_mailchimp_ecommerce_admin_settings_alter(&$form, &$form_state) {
  $form['mailchimp_ecommerce_integration']['#options']['ubercart'] = t('Ubercart');

  // Add submit handler as first element in submit array.
  array_unshift($form['#submit'], 'mailchimp_ecommerce_ubercart_integration_admin_settings_submit');
}

/**
 * Submit handler for the MailChimp eCommerce settings form.
 */
function mailchimp_ecommerce_ubercart_integration_admin_settings_submit($form, &$form_state) {
  // TODO: Create store ID.
}

/**
 * Implements hook_node_insert().
 */
function mailchimp_ecommerce_ubercart_node_insert($node) {
  if ($node->type == 'product') {
    // Create a corresponding MailChimp product.
    $product = mailchimp_ecommerce_ubercart_get_product_values_from_node($node);

    mailchimp_ecommerce_add_product(
      $product['id'],
      $product['variant_id'],
      $product['title'],
      $product['description'],
      $product['type'],
      $product['sku'],
      $product['price']);
  }
}

/**
 * Implements hook_node_update().
 */
function mailchimp_ecommerce_ubercart_node_update($node) {
  if ($node->type == 'product') {
    // Update the corresponding MailChimp product.
    $product = mailchimp_ecommerce_ubercart_get_product_values_from_node($node);

    mailchimp_ecommerce_add_product(
      $product['id'],
      $product['variant_id'],
      $product['title'],
      $product['description'],
      $product['type'],
      $product['sku'],
      $product['price']);
  }
}

/**
 * Gets MailChimp product values from an Ubercart product node.
 *
 * @param object $node
 *   The Ubercart 'product' type node.
 *
 * @return array
 *   Array of product values for use with MailChimp.
 */
function mailchimp_ecommerce_ubercart_get_product_values_from_node($node) {
  $node_wrapper = entity_metadata_wrapper('node', $node);

  $product = array(
    'id' => $node_wrapper->nid->value(),
    'variant_id' => $node_wrapper->model->value(),
    'sku' => $node_wrapper->model->value(),
    'title' => $node_wrapper->title->value(),
    'description' => (isset($node_wrapper->body->value()['value'])) ? $node_wrapper->body->value()['value'] : '',
    'price' => $node_wrapper->sell_price->value(),
    // TODO: Ubercart product types.
    'type' => '',
  );

  return $product;
}

/**
 * Implements hook_uc_order().
 */
function mailchimp_ecommerce_ubercart_uc_order($op, $order) {
  $mc_order = _mailchimp_ecommerce_ubercart_build_order($order);

  if ($op == 'new') {
    if ($order->order_status == 'in_checkout') {
      // TODO: Create new customer.
      // Create new cart in MailChimp.
      mailchimp_ecommerce_add_cart($order->order_id, $mc_order['customer'], $mc_order['order_data']);
    }
    else {
      // Create new order in MailChimp.
      mailchimp_ecommerce_add_order($order->order_id, $mc_order['customer'], $mc_order['order_data']);
    }
  }
  elseif ($op == 'save') {
    if ($order->order_status == 'in_checkout') {
      // Update cart in MailChimp.
      mailchimp_ecommerce_update_cart($order->order_id, $mc_order['customer'], $mc_order['order_data']);
    }
    else {
      if (!empty(mailchimp_ecommerce_get_order($order->order_id))) {
        // Update existing order in MailChimp.
        mailchimp_ecommerce_update_order($order->order_id, $mc_order['order_data']);
      }
      else {
        // Convert cart to order in MailChimp.
        mailchimp_ecommerce_delete_cart($order->order_id);
        mailchimp_ecommerce_add_order($order->order_id, $mc_order['customer'], $mc_order['order_data']);
      }
    }
  }
}

/**
 * Builds a MailChimp order from an Ubercart order.
 *
 * @param UcOrder $order
 *   The Ubercart order.
 *
 * @return object
 *   Order object in a MailChimp-friendly format.
 */
function _mailchimp_ecommerce_ubercart_build_order($order) {
  $currency_code = $order->currency;
  $order_total = '';
  $lines = [];

  $billing_address = [
    'name' => $order->billing_first_name . ' ' . $order->billing_last_name,
    'address1' => $order->billing_street1,
    'address2' => $order->billing_street2,
    'city' => $order->billing_city,
    'province_code' => '',
    'postal_code' => $order->billing_postal_code,
    'country_code' => $order->billing_country,
    'company' => $order->billing_company,
  ];

  if (!empty($order->products)) {
    foreach ($order->products as $product) {
      $line = [
        'id' => $product->order_product_id,
        'product_id' => $product->nid,
        'product_variant_id' => $product->model,
        'quantity' => (int) $product->qty,
        'price' => $product->price,
      ];

      $lines[] = $line;
    }
  }

  $customer = [
    'id' => $order->uid,
  ];

  $order_data = [
    'currency_code' => $currency_code,
    'order_total' => $order_total,
    'billing_address' => $billing_address,
    'processed_at_foreign' => date('c'),
    'lines' => $lines,
  ];

  return ['customer' => $customer, 'order_data' => $order_data];
}

// TODO: Implement mailchimp_ecommerce_add_customer()
// TODO: Implement mailchimp_ecommerce_update_customer()
// TODO: Implement mailchimp_ecommerce_delete_customer()
// TODO: Implement mailchimp_ecommerce_get_customer()
// TODO: Implement mailchimp_ecommerce_delete_product_variant()
